<?php
// $Id: siteattention.module,v 1.1.6.3 2013-09-19 15:00:00 $ 

/**
 * @file
 * The first SEO tool for all Content Management Systems (CMS) guiding your customers to create Search Engine Optimized Content in realtime.
 */

/**
 * Implementation of hook_menu().
 */
function siteattention_menu() {
  $items = array();
  
  $items['admin/settings/siteattention'] = array(
    'title' => 'SiteAttention settings',
    'description' => 'Adjust SiteAttention settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteattention_config_form'),
    'access arguments' => array('administer siteattention settings'),
  );    
  
  return $items;
}

/**
 * Implementation of siteattention_permission().
 */
function siteattention_permission(){
  return array(
    'administer siteattention settings' => array(
      'title' => t('Administer SiteAttention settings'),
      'description' => t('Change administrative settings for SiteAttention, such as API key.'),
    ),
    'view siteattention plugin' => array(
      'title' => t('Display SiteAttention on edit pages'),
      'description' => t('Allows users to view and use SiteAttention on edit page for node types where SiteAttention is enabled.'),
    ),
  );
}

/**
 * Implementation of hook_form() for siteattention configuration page.
 */
function siteattention_config_form(){
  // License Key Field
  $form['siteattention_license_key'] = array(
    '#type' => 'textfield',
    '#title' => 'SiteAttention license key',
    '#required' => TRUE,
    '#default_value' => variable_get('siteattention_license_key', ''),
    '#description' => t('Site specific key for the plugin.'),
  );
  // Node types checkboxes
  $form['node_types'] = array(
    '#title' => t("Nodetypes"),
    '#type' => 'fieldset',
    '#description' => t('Select specific Node Type(s) to activate SiteAttention plugin module for them.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $node_types = _node_types_build()->types;
  foreach ($node_types as $node_type) { 
    $form['node_types']['siteattention_status_' . $node_type->type] = array(
      '#type' => 'checkbox',
      '#title' => $node_type->name,
      '#default_value' => variable_get('siteattention_status_' . $node_type->type, FALSE),
    );
  }
   
  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter).
 */
function siteattention_form_alter(&$form, &$form_state, $form_id) {
  // Make sure we only load the SiteAttention plugin for activated nodetypes,
  // and only for roles allowed to use it.
  if (user_access('view siteattention plugin') && preg_match("/-node-form$/", $form['#id']) && variable_get('siteattention_status_' . $form['type']['#value'], 0) == 1) {
    $siteattention_license_key = variable_get('siteattention_license_key', '');

    // Make sure the license is set
    if (!empty($siteattention_license_key)) {
      drupal_add_js('      
				(function(){
					var SiteAttention = document.createElement("script"); SiteAttention.type = "text/javascript"; SiteAttention.async = true;
					SiteAttention.src = ("https:" == document.location.protocol ? "https://" : "http://") + "plugin.siteattention.com/?'.$siteattention_license_key.'";
					var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(SiteAttention, s);
				})();', 'inline', 'footer'
      );
    }
    else {
      drupal_set_message(t('The SiteAttention plugin is installed but is not configured. You can administer the settings on the !settings_link.', array('!settings_link' => l(t('settings page'), 'admin/settings/siteattention'))), 'warning');
    }
  }
}

/**
* Modify CCK form elements on the node edit form.
* Basically we want to add a descripton and some CSS classes
* to the CCK fields that are affected by the SiteAttention plugin.
*/
function siteattention_nodeform_after_build($form, &$form_state) {
  // Prepare fields to run through
  $all_fields_array = content_fields();
  $all_fields_array['title'] = array();
  $all_fields_array['body'] = array();
  // Prepare title fields
  $title_fields_array = variable_get('siteattention_title_fields', '');
  $title_fields_array['title'] = 'title'; 
  // Prepare body fields
  $body_fields_array = variable_get('siteattention_body_fields', '');
  $body_fields_array['body'] = 'body';
   
  // Inject CSS classes and descriptions into the form
  siteattention_cck_walker($form, $title_fields_array, 'siteattention_title', $all_fields_array);
  siteattention_cck_walker($form, $body_fields_array, 'siteattention_body', $all_fields_array);
  return $form;
}

/**
* Recursively walk down the $form array looking for the CCK elements to modify
* @param $array array
*   the $form array or piece of the form array when called recursivly (must be passed by reference)
* @param $fields array
*   array of cck fields to modify
* @return
*   All modification are made by reference.
*/
function siteattention_cck_walker(&$array, &$fields, $field_class, $all_fields_array) {    
  $field_description_disclaimer = ' ' . t('This field is being used by the SiteAttention plugin.');
  
  // Now run through all fields in the form
  foreach ($array as $field_key => &$value) {
    if (is_array($value)) {
      if ($value['#type'] == 'fieldset') {
        // Call this function again recursively for the fieldsets
        siteattention_cck_walker($value, $fields, $field_class, $all_fields_array);
      }
      elseif (in_array($field_key, $fields)) {
        // Special rule for title
        if ($field_key == 'title') {
          $value['#attributes']['class'] = $field_class . ' siteattention_type_text_textfield';
          $value['#description'] .= $field_description_disclaimer;
        }
        // Special rule for body
        elseif ($field_key == 'body') {
          $value['body']['#attributes']['class'] = $field_class . ' siteattention_type_text_textarea';
          $value['body']['#description'] .= $field_description_disclaimer;
        }
        // We are dealing wqith a CCK field
        elseif (!empty($array[$field_key])) {
          $value[0]['value']['#attributes']['class'] = $field_class . ' siteattention_type_' . $all_fields_array[$field_key]['widget']['type'];
          $value[0]['value']['#description'] .= $field_description_disclaimer;
        }
      }  
    }
  }
}