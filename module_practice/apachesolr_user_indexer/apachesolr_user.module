<?php
// $Id$

/**
 * @file
 *   Indexer for the user entities for the Apachesolr module.
 */

function apachesolr_user_apachesolr_entity_info_alter(&$entity_info) {
  $entity_info['user']['indexable'] = TRUE;
  $entity_info['user']['status callback'] = 'apachesolr_user_status_callback';
  $entity_info['user']['document callback'][] = 'apachesolr_user_solr_document';
  $entity_info['user']['reindex callback'] = 'apachesolr_user_solr_reindex';
  $entity_info['user']['index_table'] = 'apachesolr_index_entities_user';
}

/**
 * Status callback for ApacheSolr, for users.
 */
function apachesolr_user_status_callback($user, $type) {
  return $user->status;
}

/**
 * Builds the user-specific information for a Solr document.
 *
 * @param ApacheSolrDocument $document
 *   The Solr document we are building up.
 * @param stdClass $entity
 *   The entity we are indexing.
 * @param string $entity_type
 *   The type of entity we're dealing with.
 */
function apachesolr_user_solr_document(ApacheSolrDocument $document, $account, $entity_type) {

  $document->uid = $account->uid;

  // Title is a required field.
  $document->label = apachesolr_clean_text(format_username($account));

  $document->mail = $account->mail;
  $document->signature = $account->signature;

  // Note the conspicuous lack of password hash. :-)

  //  Generic usecase for future reference. Callbacks can
  //  allow you to send back multiple documents
  $documents = array();

  $original_id = $document->id;

  foreach (language_list() as $language => $value) {
    // Let's skip English version of results.
    if ($language == 'en') continue;

    // Clone document object.
    $doc = new stdClass;
    $doc = clone $document;

    // Build view that will be used for search.
    $build = user_view($account, 'search_index');
    // Why do we need this?
    unset($build['#theme']);

    // Custom settup for different sites.
    switch ($language) {
      case 'da':
        unset($build['field_employee_description_no']);
        unset($build['field_job_title_no']);
        break;
      case 'nb':
        unset($build['field_employee_description']);
        unset($build['field_job_title']);
        $doc->site = str_replace('peytz-dk', 'peytz-no', $doc->site);
        $doc->url = str_replace('peytz-dk', 'peytz-no', $doc->url);
        break;
    }

    // Build text.
    $text = drupal_render($build);

    // Create our content field.
    $doc->content = apachesolr_clean_text($text);

    $doc->created = apachesolr_date_iso($account->created);
    $doc->access = apachesolr_date_iso($account->access);

    // Change basic document language.
    $doc->ss_language = $language;

    // Same we need to update hash and document id
    $doc->hash = $language . apachesolr_site_hash();
    $doc->id = $language . $original_id;

    $documents[] = $doc;

  }

  return $documents;

}

/**
 * Reindexing callback for ApacheSolr, for users.
 */
function apachesolr_user_solr_reindex() {
  $indexer_table = apachesolr_get_indexer_table('user');
  $transaction = db_transaction();
  $env_id = apachesolr_default_environment();
  try {
    db_delete($indexer_table)
      ->condition('entity_type', 'user')
      ->execute();

    // We know there's only one bundle type, so if that doesn't get indexed just
    // skip this entirely.
    if (apachesolr_get_index_bundles($env_id, 'user')) {
      $select = db_select('users', 'u');
      $select->addExpression("'user'", 'entity_type');
      $select->addExpression("'user'", 'bundle');
      $select->addField('u', 'uid', 'entity_id');
      $select->addField('u', 'status', 'status');
      $select->addExpression(REQUEST_TIME, 'changed');

      $insert = db_insert($indexer_table)
        ->fields(array('entity_id', 'status', 'entity_type', 'bundle', 'changed'))
        ->from($select)
        ->execute();
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    drupal_set_message($e->getMessage(), 'error');
    watchdog_exception('Apache Solr', $e);
    return FALSE;
  }

  return TRUE;
}
